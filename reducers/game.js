// @flow

import {
  WELL_ROWS,
  WELL_COLS,
  DROP_FRAMES_DEFAULT,
  DROP_FRAMES_DECREMENT,
  LINE_CLEAR_BONUSES
} from '../constants/grid';
import { SHAPES, COLORS } from '../constants/tetromino';
import {
  getNextTetromino,
  getInitialPositionForTetromino
} from '../utils/tetromino';
import { getSampleUser } from '../utils/user';
import {
  generateEmptyGrid,
  rotate,
  isPositionAvailable,
  getBottomMostPosition,
  transferTetrominoToGrid,
  hasLines,
  clearLines,
  fitTetrominoPositionInWellBounds,
  getBlocksFromGridRows,
  overrideBlockIds,
  appendBlocksToGrid,
  getNextCellId
} from '../utils/grid';

import type {
  UserId,
  User,
  WellGrid,
  Player,
  GameId,
  Game
} from '../types/state';
import type { GameAction } from '../types/actions';

export function gameReducer(state: void | Game, action: GameAction): Game {
  if (!state) {
    switch (action.type) {
      case 'CREATE_GAME': {
        const { gameId, user } = action.payload;

        return getBlankGame({
          id: gameId,
          user
        });
      }
      default:
        throw new Error(`Game action ${action.type} called on void state`);
    }
  }

  switch (action.type) {
    case 'JOIN_GAME': {
      const { user } = action.payload;
      const { id, players } = state;

      // Prevent duplicating player for same user
      if (players.find(p => p.user.id === user.id)) {
        return state;
      }

      return {
        ...state,
        players: [...players, getBlankPlayer(id, user)]
      };
    }

    case 'PLAYER_READY': {
      const { userId } = action.payload;

      return updatePlayer(state, userId, { status: 'READY' });
    }

    case 'DROP': {
      const { userId, rows } = action.payload;
      const player = getPlayer(state, userId);
      const {
        grid,
        activeTetromino,
        activeTetrominoGrid,
        activeTetrominoPosition
      } = player;

      // Clear lines generated by a previous `APPEND_PENDING_BLOCKS` action
      // TODO: Bring back functionality or remove it with docs
      // if (hasLines(grid)) {
      //   const { clearedGrid, rowsCleared } = clearLines(grid);
      //   const blocksCleared = getBlocksFromGridRows(grid, rowsCleared);
      //   const newState = updatePlayer(state, userId, {
      //     grid: clearedGrid,
      //     blocksCleared
      //   });
      //
      //   return rewardClearedBlocks(newState, userId);
      // }

      // Drop active Tetromino until it hits something
      let newPosition = {
        x: activeTetrominoPosition.x,
        y: activeTetrominoPosition.y + rows
      };

      // New active Tetromino position is available, uneventful path
      if (isPositionAvailable(grid, activeTetrominoGrid, newPosition)) {
        return updatePlayer(state, userId, {
          activeTetrominoPosition: newPosition
        });
      }

      // Active Tetromino has hit the ground
      // A big frame skip could cause the Tetromino to jump more than one row.
      // We need to ensure it ends up in the bottom-most one in case the jump
      // caused the Tetromino to land
      newPosition = getBottomMostPosition(
        grid,
        activeTetrominoGrid,
        newPosition
      );

      // Game over when active Tetromino lands (partially) outside the well.
      // NOTE: This is not ideal because the landed Tetromino, even though it
      // doesn't fit when it lands, could cause one or more lines which
      // after cleared could make room for the entire Tetromino. To implement
      // this we would need to somehow re-apply the part of the active Tetromino
      // that didn't fit upon landing, after the lines have been cleared.
      if (newPosition.y < 0) {
        return {
          ...state,
          status: 'OVER'
        };
      }

      // This is when the active Tetromino hits the bottom of the Well and can
      // no longer be controlled
      const newGrid = transferTetrominoToGrid(
        player,
        activeTetrominoGrid,
        newPosition,
        COLORS[activeTetromino]
      );
      let newState = state;

      newState = resetActiveTetromino(newState, userId);
      newState = updatePlayer(newState, userId, { grid: newGrid });

      if (!hasLines(newGrid)) {
        return newState;
      }

      const { clearedGrid, rowsCleared } = clearLines(newGrid);
      const blocksCleared = getBlocksFromGridRows(newGrid, rowsCleared);
      newState = updatePlayer(newState, userId, {
        grid: clearedGrid,
        blocksCleared
      });
      newState = rewardClearedBlocks(newState, userId);

      // Transfer blocks from cleared lines to enemy grid ðŸ˜ˆ
      // We reference the old grid, to get the blocks of the cleared lines
      // *without* the blocks added from the just transfered active Tetromino
      return sendClearedBlocksToEnemy(newState, userId, grid, rowsCleared);
    }

    case 'APPEND_PENDING_BLOCKS': {
      const { userId } = action.payload;
      const player = getPlayer(state, userId);
      const {
        grid,
        blocksPending,
        activeTetrominoGrid,
        activeTetrominoPosition
      } = player;

      // XXX: The appended blocks might result in trimming existing blocks, by
      // lifting them higher than the well permits. This is odd because it
      // "trims" some blocks
      let newGrid = appendBlocksToGrid(grid, blocksPending);

      // Push active Tetromino up if necessary
      if (
        isPositionAvailable(
          newGrid,
          activeTetrominoGrid,
          activeTetrominoPosition
        )
      ) {
        return updatePlayer(state, userId, {
          grid: newGrid,
          blocksPending: []
        });
      }

      // Receiving rows of blocks from enemy might cause the active Tetromino
      // to overlap with the grid, so in some cases it will be pushed up
      // mid-drop to avoid collisions. The next DROP action will instantly
      // transfer active Tetromino to wall grid in these cases
      const newPosition = getBottomMostPosition(
        newGrid,
        activeTetrominoGrid,
        activeTetrominoPosition
      );

      return updatePlayer(state, userId, {
        // The next `DROP` event will determine whether the well is full and
        // if the game is OVER or not
        grid: newGrid,
        blocksPending: [],
        activeTetrominoPosition: newPosition
      });
    }

    case 'MOVE_LEFT':
    case 'MOVE_RIGHT': {
      const { userId } = action.payload;
      const direction = action.type === 'MOVE_LEFT' ? -1 : 1;
      const player = getPlayer(state, userId);
      const { grid, activeTetrominoGrid, activeTetrominoPosition } = player;
      const newPosition = Object.assign({}, activeTetrominoPosition, {
        x: activeTetrominoPosition.x + direction
      });

      // Attempting to move the Tetromino outside the Well bounds or over landed
      // Tetrominoes will be ignored
      if (!isPositionAvailable(grid, activeTetrominoGrid, newPosition)) {
        return state;
      }

      return updatePlayer(state, userId, {
        activeTetrominoPosition: newPosition
      });
    }

    case 'ROTATE': {
      const { userId } = action.payload;
      const player = getPlayer(state, userId);
      const { grid, activeTetrominoGrid, activeTetrominoPosition } = player;
      const newGrid = rotate(activeTetrominoGrid);

      // If the rotation causes the active Tetromino to go outside of the
      // Well bounds, its position will be adjusted to fit inside
      const newPosition = fitTetrominoPositionInWellBounds(
        grid,
        newGrid,
        activeTetrominoPosition
      );

      // If the rotation causes a collision with landed Tetrominoes than it won't
      // be applied
      if (!isPositionAvailable(grid, newGrid, newPosition)) {
        return state;
      }

      return updatePlayer(state, userId, {
        activeTetrominoGrid: newGrid,
        activeTetrominoPosition: newPosition
      });
    }

    case 'ENABLE_ACCELERATION': {
      const { userId } = action.payload;

      return updatePlayer(state, userId, {
        dropAcceleration: true
      });
    }

    case 'DISABLE_ACCELERATION': {
      const { userId } = action.payload;

      return updatePlayer(state, userId, {
        dropAcceleration: false
      });
    }

    default:
      return state;
  }
}

export function getBlankGame(
  {
    id = Date.now(),
    user = getSampleUser(),
    dropFrames = DROP_FRAMES_DEFAULT
  }: {
    id?: GameId,
    user?: User,
    dropFrames?: number
  } = {}
): Game {
  return {
    id,
    status: 'PLAYING',
    players: [getBlankPlayer(id, user)],
    dropFrames
  };
}

export function getBlankPlayer(gameId: GameId, user: User): Player {
  const activeTetromino = getNextTetromino(gameId, 0);
  const nextTetromino = getNextTetromino(gameId, 1);
  const activeTetrominoGrid = SHAPES[activeTetromino];
  const activeTetrominoPosition = getInitialPositionForTetromino(
    activeTetromino,
    WELL_COLS
  );

  return {
    user,
    status: 'PENDING',
    drops: 0,
    score: 0,
    lines: 0,
    grid: generateEmptyGrid(WELL_ROWS, WELL_COLS),
    blocksCleared: [],
    blocksPending: [],
    nextTetromino,
    activeTetromino,
    activeTetrominoGrid,
    activeTetrominoPosition,
    dropAcceleration: false
  };
}

export function getPlayer(game: Game, userId: number): Player {
  const player = game.players.find(p => p.user.id === userId);

  if (!player) {
    throw new Error(`Player with userId ${userId} does not exist`);
  }

  return player;
}

// XXX: This only works with max 2 players per game
export function getEnemyPlayer(game: Game, curUserId: number): ?Player {
  const player = game.players.find(p => p.user.id !== curUserId);

  return player;
}

export function allPlayersReady(game: Game) {
  return (
    game.players.filter(p => p.status === 'READY').length ===
    game.players.length
  );
}

export function updatePlayer(
  game: Game,
  userId: number,
  attrs: $Shape<Player>
): Game {
  const { players } = game;
  const player = getPlayer(game, userId);
  const playerIndex = players.indexOf(player);

  return {
    ...game,
    players: [
      ...players.slice(0, playerIndex),
      { ...player, ...attrs },
      ...players.slice(playerIndex + 1)
    ]
  };
}

function rewardClearedBlocks(game: Game, userId: UserId): Game {
  const { dropFrames } = game;
  const player = getPlayer(game, userId);
  const { score, lines, blocksCleared, dropAcceleration } = player;

  // TODO: Calculate cells in Tetromino. All current Tetrominoes have 4 cells
  const cells = 4;

  // Rudimentary scoring logic, no T-Spin and combo bonuses. Read more at
  // http://tetris.wikia.com/wiki/Scoring
  let points = dropAcceleration ? cells * 2 : cells;
  if (blocksCleared.length) {
    points += LINE_CLEAR_BONUSES[blocksCleared.length - 1] * (lines + 1);
  }

  return {
    ...updatePlayer(game, userId, {
      score: score + points,
      lines: lines + blocksCleared.length
    }),
    // Increase speed whenever a line is cleared (fast game)
    dropFrames: blocksCleared.length
      ? dropFrames - DROP_FRAMES_DECREMENT
      : dropFrames
  };
}

function resetActiveTetromino(game: Game, userId: UserId): Game {
  const player = getPlayer(game, userId);
  const { drops, nextTetromino } = player;

  return updatePlayer(game, userId, {
    drops: drops + 1,
    nextTetromino: getNextTetromino(game.id, drops + 2),
    activeTetromino: nextTetromino,
    activeTetrominoGrid: SHAPES[nextTetromino],
    activeTetrominoPosition: getInitialPositionForTetromino(
      nextTetromino,
      WELL_COLS
    ),
    // Clear acceleration after dropping Tetromino. Sometimes the key
    // events would misbehave and acceleration would remain on even after
    // releasing DOWN key
    dropAcceleration: false
  });
}

function sendClearedBlocksToEnemy(
  game: Game,
  userId: UserId,
  unclearedGrid: WellGrid,
  rowsCleared: Array<number>
): Game {
  const enemy = getEnemyPlayer(game, userId);
  if (!enemy) {
    return game;
  }

  const blocksPending = overrideBlockIds(
    getBlocksFromGridRows(unclearedGrid, rowsCleared),
    getNextCellId(enemy)
  );

  return updatePlayer(game, enemy.user.id, {
    blocksPending: [...enemy.blocksPending, ...blocksPending]
  });
}
